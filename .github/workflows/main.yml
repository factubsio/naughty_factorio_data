name: CMake Build Matrix

on: [pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}-${{ matrix.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        config:
        - {
            name: "Windows MSVC", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            cc: "cl.exe", cxx: "cl.exe",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            cc: "gcc-8", cxx: "g++-8"
          }
        - {
            name: "Ubuntu Clang", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            cc: "clang-9", cxx: "clang++-9"
          }
        # - {
        #     name: "macOS Latest Clang", artifact: "macOS.tar.xz",
        #     os: macos-latest,
        #     cc: "clang", cxx: "clang++"
        #   }

    steps:

      # - name: Setup vcvars
      #   if: ${{ matrix.config.environment_script != '' }}
      #   shell: cmd
      #   run: |
      #     dir "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/"
      #     call "${{ matrix.config.environment_script }}"

      - name: Install xorg-dev
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        run: sudo apt-get install -y xorg-dev

      - uses: actions/checkout@v1

      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v2
        with:
          vcpkgGitCommitId: "0591528cbfde14ccfd3900c3fb19aba382c05349"

      - name: Configure and Build
        uses: lukka/run-cmake@v2.5
        with:
          useVcpkgToolChainFile: true
        env:
          CXX: ${{ matrix.config.cxx }}
          CC: ${{ matrix.config.cc }}

      